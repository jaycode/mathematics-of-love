{
  "name": "handlebars-layouts",
  "version": "2.0.2",
  "description": "Handlebars helpers which implement layout blocks similar to Jade, Jinja, Swig, and Twig.",
  "keywords": [
    "blocks",
    "dust",
    "express",
    "handlebars",
    "hbs",
    "jade",
    "layout",
    "mote",
    "mustache",
    "swig",
    "twig"
  ],
  "homepage": "https://github.com/shannonmoeller/handlebars-layouts",
  "bugs": {
    "url": "https://github.com/shannonmoeller/handlebars-layouts/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Shannon Moeller",
    "email": "me@shannonmoeller.com",
    "url": "http://shannonmoeller.com"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/shannonmoeller/handlebars-layouts.git"
  },
  "scripts": {
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "test": "gulp test",
    "zuul": "zuul -- test/handlebars-layouts.spec.js"
  },
  "devDependencies": {
    "browserify": "^9.0.8",
    "consolidate": "^0.12.1",
    "coveralls": "^2.11.2",
    "expect": "^1.6.0",
    "express": "^4.12.3",
    "gulp": "^3.8.11",
    "gulp-istanbul": "^0.8.1",
    "gulp-jscs": "^1.6.0",
    "gulp-jshint": "^1.10.0",
    "gulp-mocha": "^2.0.1",
    "gulp-prettify": "^0.3.0",
    "handlebars": "~3.0",
    "jshint-stylish": "^1.0.1",
    "through2": "^0.6.5",
    "vinyl-fs": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "zuul": "^2.1.1"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "readme": "# `handlebars-layouts`\n\n[![NPM version][npm-img]][npm-url] [![Downloads][downloads-img]][npm-url] [![Build Status][travis-img]][travis-url] [![Coverage Status][coveralls-img]][coveralls-url] [![Chat][gitter-img]][gitter-url]\n\nHandlebars helpers which implement layout blocks similar to Jade, Jinja, Swig, and Twig.\n\n## Install\n\nWith [Node.js](http://nodejs.org):\n\n    $ npm install handlebars-layouts\n\nWith [Bower](http://bower.io):\n\n    $ bower install shannonmoeller/handlebars-layouts\n\n## Helpers\n\n### `{{#extend [partial] [key=value ...]}}`\n\n- `partial` `String` - Name of partial to render.\n- `attributes` `Object` _(Optional)_ - Arbitrary values that will be added to the partial data context.\n\nLoads a layout partial of a given name and defines block content.\n\n```handlebars\n{{#extend \"layout\" foo=\"bar\"}}\n    {{#content \"title\" mode=\"prepend\"}}Example - {{/content}}\n{{/extend}}\n```\n\nThe `{{#extend}}` helper allows you to reason about your layouts as you would class extension where the above is equivalent to the following psuedo code:\n\n```js\nclass Page extends Layout {\n    constructor() {\n        this.foo = 'bar';\n    }\n\n    title() {\n        return 'Example - ' + super();\n    }\n}\n```\n\n### `{{#embed [partial] [key=value ...]}}`\n\n- `partial` `String` - Name of partial to render.\n- `attributes` `Object` _(Optional)_ - Arbitrary values that will be added to the partial data context.\n\nAllows you to load a partial which itself extends from a layout. Blocks defined in embedded partials will not conflict with those in the primary layout.\n\n```handlebars\n{{#extend \"layout\"}}\n\n    {{#content \"body\"}}\n        {{#embed \"gallery\"}}\n            {{#content \"body\"}}\n                <img src=\"1.png\" alt=\"\" />\n                <img src=\"2.png\" alt=\"\" />\n            {{/content}}\n        {{/embed}}\n\n        {{#embed \"modal\" foo=\"bar\" name=user.fullName}}\n            {{#content \"title\" mode=\"prepend\"}}Image 1 - {{/content}}\n            {{#content \"body\"}}<img src=\"1.png\" alt=\"\" />{{/content}}\n        {{/embed}}\n    {{/content}}\n\n{{/extend}}\n```\n\nThe `{{#embed}}` helper allows you to reason about your partials as you would class instantiation where the above is equivalent to the following psuedo code:\n\n```js\nclass Page extends Layout {\n    body() {\n        var gallery = new Gallery();\n\n        gallery.replaceBody('<img src=\"1.png\" alt=\"\" />\\n<img src=\"2.png\" alt=\"\" />');\n\n        var modal = new Modal({\n            foo: 'bar',\n            name: this.user.fullName\n        });\n\n        modal.prependTitle('Image 1 - ');\n        modal.replaceBody('<img src=\"1.png\" alt=\"\" />');\n\n        return gallery.toString() + modal.toString();\n    }\n}\n```\n\n### `{{#block [name]}}`\n\n- `name` `String` - Block identifier.\n\nDefines a named block, with optional default content. Blocks may have content appended, prepended, or replaced entirely when extending or embedding. You may append and prepend to the same block multiple times.\n\n```handlebars\n{{#block \"header\"}}\n    <h1>Hello World</h1>\n{{/block}}\n\n{{#block \"main\"}}\n    <p>Lorem ipsum...</p>\n{{/block}}\n\n{{#block \"footer\"}}\n    <p>&copy; 1970</p>\n{{/block}}\n```\n\nDefault block content is optional, and may be omitted.\n\n```handlebars\n<h1>{{{block \"title\"}}}</h1>\n<p>{{{block \"description\"}}}</p>\n```\n\n### `{{#content [name] mode=\"(append|prepend|replace)\"}}`\n\n- `name` `String` - Identifier of the block to modify.\n- `mode` `String` _(Optional)_ - Means of providing block content. Default: `replace`.\n\nSets block content, optionally appending or prepending using the `mode` attribute.\n\nLayout:\n\n```handlebars\n<html>\n    ...\n    <body>\n        {{#block \"header\"}}\n            <h1>Hello World</h1>\n        {{/block}}\n\n        {{#block \"main\"}}\n            <p>Lorem ipsum.</p>\n        {{/block}}\n\n        {{#block \"footer\"}}\n            <p>&copy; 1999</p>\n        {{/block}}\n    </body>\n</html>\n```\n\nPage:\n\n```handlebars\n{{#extend \"layout\"}}\n\n    {{#content \"header\"}}\n        <h1>Goodnight Moon</h1>\n    {{/content}}\n\n    {{#content \"main\" mode=\"append\"}}\n        <p>Dolor sit amet.</p>\n    {{/content}}\n\n    {{#content \"footer\" mode=\"prepend\"}}\n        <p>MIT License</p>\n    {{/content}}\n\n{{/extend}}\n```\n\nOutput:\n\n```handlebars\n<html>\n    ...\n    <body>\n        <h1>Goodnight Moon</h1>\n\n        <p>Lorem ipsum.</p>\n        <p>Dolor sit amet.</p>\n\n        <p>MIT License</p>\n        <p>&copy; 1999</p>\n    </body>\n</html>\n```\n\nContent is optional, and may be omitted. This will cause the `main` block to be replaced with an empty string, clearing out any default content.\n\n```handlebars\n{{{content \"main\"}}}\n```\n\n### Conditional Blocks\n\nThere are times where you need to wrap a block with an element or use a different class depending on whether content has been provided for a block. For this purpose, `handlebars-layouts` exposes a special `@content` variable which can be used to check whether content has been provided for a block.\n\nFor example, you may wish to have an optional column in a grid layout:\n\n```handlebars\n{{!-- layout.hbs --}}\n<div class=\"grid\">\n    <div class=\"grid-col {{#if @content.right}}grid-col_2of3{{else}}grid-col_full{{/if}}\">\n        {{{block \"left\"}}}\n    </div>\n    {{#if @content.right}}\n        <div class=\"grid-col grid-col_1of3\">\n            {{{block \"right\"}}}\n        </div>\n    {{/if}}\n</div>\n```\n\nFor a page that only needs a left column, you may omit defining content for the `right` block:\n\n```handlebars\n{{!-- page.html --}}\n{{#extend \"layout\"}}\n\n    {{#content \"left\"}}\n        <p>Left</p>\n    {{/content}}\n    \n{{/extend}}\n```\n\nResulting in:\n\n```html\n<div class=\"grid\">\n    <div class=\"grid-col grid-col_full\">\n        <p>Left</p>\n    </div>\n</div>\n```\n\nFor a page with two columns, simply define content for both blocks:\n\n```handlebars\n{{!-- page.html --}}\n{{#extend \"layout\"}}\n\n    {{#content \"left\"}}\n        <p>Left</p>\n    {{/content}}\n\n    {{#content \"right\"}}\n        <p>Right</p>\n    {{/content}}\n    \n{{/extend}}\n```\n\nResulting in:\n\n```html\n<div class=\"grid\">\n    <div class=\"grid-col grid-col_2of3\">\n        <p>Left</p>\n    </div>\n    <div class=\"grid-col grid-col_1of3\">\n        <p>Right</p>\n    </div>\n</div>\n```\n\n## Api\n\nHelpers are generated by passing in your instance of Handlebars. This allows you to selectively register the helpers on various instances of Handlebars.\n\n### `layouts(handlebars) : Object`\n\n- `handlebars` `Handlebars` - An instance of Handlebars.\n\nGenerates an object containing the layout helpers suitible for passing into `registerHelper`.\n\n```js\nvar handlebars = require('handlebars'),\n    layouts = require('handlebars-layouts');\n\nhandlebars.registerHelper(layouts(handlebars));\n```\n\n### `layouts.register(handlebars) : Object`\n\n- `handlebars` `Handlebars` - An instance of Handlebars.\n\nBoth generates an object containing the layout helpers and registers them automatically.\n\n```js\nvar handlebars = require('handlebars'),\n    layouts = require('handlebars-layouts');\n\nlayouts.register(handlebars);\n```\n\n## Example\n\n### layout.hbs\n\n```handlebars\n<!doctype html>\n<html lang=\"en-us\">\n<head>\n    {{#block \"head\"}}\n        <title>{{title}}</title>\n\n        <link rel=\"stylesheet\" href=\"assets/css/screen.css\" />\n    {{/block}}\n</head>\n<body>\n    <div class=\"site\">\n        <div class=\"site-hd\" role=\"banner\">\n            {{#block \"header\"}}\n                <h1>{{title}}</h1>\n            {{/block}}\n        </div>\n\n        <div class=\"site-bd\" role=\"main\">\n            {{#block \"body\"}}\n                <h2>Hello World</h2>\n            {{/block}}\n        </div>\n\n        <div class=\"site-ft\" role=\"contentinfo\">\n            {{#block \"footer\"}}\n                <small>&copy; 2013</small>\n            {{/block}}\n        </div>\n    </div>\n\n    {{#block \"foot\"}}\n        <script src=\"assets/js/controllers/home.js\"></script>\n    {{/block}}\n</body>\n</html>\n```\n\n### page.html\n\n```handlebars\n{{#extend \"layout\"}}\n    {{#content \"head\" mode=\"append\"}}\n        <link rel=\"stylesheet\" href=\"assets/css/home.css\" />\n    {{/content}}\n\n    {{#content \"body\"}}\n        <h2>Welcome Home</h2>\n\n        <ul>\n            {{#items}}\n                <li>{{.}}</li>\n            {{/items}}\n        </ul>\n    {{/content}}\n\n    {{#content \"foot\" mode=\"prepend\"}}\n        <script src=\"assets/js/analytics.js\"></script>\n    {{/content}}\n{{/extend}}\n```\n\n### Putting Them Together\n\n```js\nvar handlebars = require('handlebars');\nvar handlebarsLayouts = require('handlebars-layouts');\n\n// Register helpers\nhandlebars.registerHelper(handlebarsLayouts(handlebars));\n\n// Register partials\nhandlebars.registerPartial('layout', fs.readFileSync('layout.hbs', 'utf8'));\n\n// Compile template\nvar template = handlebars.compile(fs.readFileSync('page.html', 'utf8'));\n\n// Render template\nvar output = template({\n    title: 'Layout Test',\n    items: [\n        'apple',\n        'orange',\n        'banana'\n    ]\n});\n\nconsole.log(output);\n```\n\n### Output (prettified for readability)\n\n```handlebars\n<!doctype html>\n<html lang=\"en-us\">\n<head>\n    <title>Layout Test</title>\n\n    <link rel=\"stylesheet\" href=\"assets/css/screen.css\" />\n    <link rel=\"stylesheet\" href=\"assets/css/home.css\" />\n</head>\n<body>\n    <div class=\"site\">\n        <div class=\"site-hd\" role=\"banner\">\n            <h1>Layout Test</h1>\n        </div>\n\n        <div class=\"site-bd\" role=\"main\">\n            <h2>Welcome Home</h2>\n            <ul>\n                <li>apple</li>\n                <li>orange</li>\n                <li>banana</li>\n            </ul>\n        </div>\n\n        <div class=\"site-ft\" role=\"contentinfo\">\n            <small>&copy; 2013</small>\n        </div>\n    </div>\n\n    <script src=\"assets/js/analytics.js\"></script>\n    <script src=\"assets/js/controllers/home.js\"></script>\n</body>\n</html>\n```\n\n## Contribute\n\n[![Tasks][waffle-img]][waffle-url] [![Tip][gittip-img]][gittip-url]\n\nStandards for this project, including tests, code coverage, and semantics are enforced with a build tool. Pull requests must include passing tests with 100% code coverage and no linting errors.\n\n## Test\n\n    $ npm test\n\n----\n\n© 2015 Shannon Moeller <me@shannonmoeller.com>\n\nLicensed under [MIT](http://shannonmoeller.com/mit.txt)\n\n[coveralls-img]: http://img.shields.io/coveralls/shannonmoeller/handlebars-layouts/master.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/shannonmoeller/handlebars-layouts\n[downloads-img]: http://img.shields.io/npm/dm/handlebars-layouts.svg?style=flat-square\n[gitter-img]:    http://img.shields.io/badge/gitter-join_chat-1dce73.svg?style=flat-square\n[gitter-url]:    https://gitter.im/shannonmoeller/handlebars-layouts\n[gittip-img]:    http://img.shields.io/gittip/shannonmoeller.svg?style=flat-square\n[gittip-url]:    https://www.gittip.com/shannonmoeller\n[npm-img]:       http://img.shields.io/npm/v/handlebars-layouts.svg?style=flat-square\n[npm-url]:       https://npmjs.org/package/handlebars-layouts\n[travis-img]:    http://img.shields.io/travis/shannonmoeller/handlebars-layouts.svg?style=flat-square\n[travis-url]:    https://travis-ci.org/shannonmoeller/handlebars-layouts\n[waffle-img]:    http://img.shields.io/github/issues/shannonmoeller/handlebars-layouts.svg?style=flat-square\n[waffle-url]:    http://waffle.io/shannonmoeller/handlebars-layouts\n",
  "readmeFilename": "README.md",
  "_id": "handlebars-layouts@2.0.2",
  "dist": {
    "shasum": "a5913bc874dd96dfc9afec87804f10f0f899eb58"
  },
  "_from": "handlebars-layouts@~2.0.2",
  "_resolved": "https://registry.npmjs.org/handlebars-layouts/-/handlebars-layouts-2.0.2.tgz"
}
